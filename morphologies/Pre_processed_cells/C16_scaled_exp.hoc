begintemplate C16_scaled_exp
public init, printInfo, delete_axon,  getCell, init_biophys, insertChannel
public gid, CellRef, getThreshold, geom_nseg, gmechdistribute, biophys
objref this, CellRef, gmechdistribute

proc init() { local ind, indswc localobj strMorphName, strTmp, sf
    strMorphName  = new String("C16_scaled_exp.swc")
    strTmp        = new String()
    sf            = new StringFunctions()
    if(numarg() ==3){
        sprint(strMorphName.s, "../Cells/MarylkaCells/VIRAL/SHRINK_COMPENSATED/%s", strMorphName.s)
        CellRef = new Cell(strMorphName.s,$1,$2,$3)
        pop_section()
    }
    if(numarg() == 2){
        sscanf($s2, "%s", strTmp.s)
        sf.right(strTmp.s, sf.len(strTmp.s)-4)
        ind = sf.substr(strTmp.s, ".asc")
        indswc = sf.substr(strTmp.s, ".swc")
        if ( ind == 0 ) {
            CellRef = new Cell($1, $s2) 
        } else if ( indswc == 0 ) {
            CellRef = new Cell($1, $s2)
        } else {
            sprint(strMorphName.s, "%s/%s", $s2, strMorphName.s)
            CellRef = new Cell($1, strMorphName.s) 
        }
    }
    gmechdistribute = new TDistFunc()
    CellRef.setCCell(this)
    gid = CellRef.gid
    geom_nseg()
    delete_axon()
    insertChannel()
    init_biophys()
    biophys()


}

obfunc getCell(){
    return CellRef

}

proc geom_nseg(){
    CellRef.geom_nseg_fixed(40)
    CellRef.geom_nsec() //To count all sections


}

proc delete_axon() {
    CellRef.delete_axon()

}
func getThreshold() {
    return 0.0 
}

proc insertChannel() {
    CellRef.insertChannel("all","pas")
    CellRef.insertChannel("all","pas")
}

proc init_biophys() {
    { forsec CellRef.all { cm = 1.0 } } 
    { forsec CellRef.all { Ra = 100.0 } } 
    { forsec CellRef.all { e_pas = -75.300257 } }


}
proc biophys() {
    { CellRef.soma distance() }
    gmechdistribute.distribute(CellRef.all,"g_pas","( 0.0 * %g  + 1.0 ) *9.99939e-05",1)
    gmechdistribute.distribute(CellRef.all,"e_pas","( 0.0 * %g  + 1.0 ) *-79.9386",1)

}

endtemplate C16_scaled_exp
