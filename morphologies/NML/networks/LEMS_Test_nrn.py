'''
Neuron simulator export for:

Components:
    na_s (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    kdr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    k (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    cal (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    cah (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    kca (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: annotation)
    h (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    ca_conc (Type: fixedFactorConcentrationModel:  restingConc=0.0 (SI concentration) decayConstant=0.013333333333333 (SI time) rho=300000.0 (SI rho_factor))
    na_a (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    leak (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    C51B (Type: cell)
    iclamp0 (Type: pulseGenerator:  delay=0.5 (SI time) duration=0.2 (SI time) amplitude=-1.0E-9 (SI current))
    net (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
    sim1 (Type: Simulation:  length=0.3 (SI time) step=1.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

'''

import neuron

import time

import hashlib
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=123456789):

        print("\n    Starting simulation in NEURON generated from NeuroML2 model...\n")

        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=sim1 type=Simulation) of network/component: net (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
        
        '''

        # Temperature used for network: 308.15 K
        h.celsius = 308.15 - 273.15

        # ######################   Population: pop0
        print("Population pop0 contains 1 instance(s) of component: C51B of type: cell")

        print("Setting the default initial concentrations for ca (used in C51B) to 3.7152 mM (internal), 3.0 mM (external)")
        h("cai0_ca_ion = 3.7152")
        h("cao0_ca_ion = 3.0")

        h.load_file("C51B.hoc")
        a_pop0 = []
        h("{ n_pop0 = 1 }")
        h("objectvar a_pop0[n_pop0]")
        for i in range(int(h.n_pop0)):
            h("a_pop0[%i] = new C51B()"%i)
            h("access a_pop0[%i].Soma"%i)

            self.next_global_id+=1

        h("{ a_pop0[0].position(0, 0, 0) }")

        h("proc initialiseV_pop0() { for i = 0, n_pop0-1 { a_pop0[i].set_initial_v() } }")
        h("objref fih_pop0")
        h('{fih_pop0 = new FInitializeHandler(0, "initialiseV_pop0()")}')

        h("proc initialiseIons_pop0() { for i = 0, n_pop0-1 { a_pop0[i].set_initial_ion_properties() } }")
        h("objref fih_ion_pop0")
        h('{fih_ion_pop0 = new FInitializeHandler(1, "initialiseIons_pop0()")}')

        # ######################   Input List: Clamps
        print("Adding input list: Clamps to pop0, with 1 inputs of type iclamp0")

        # Adding single input: Component(id=0 type=input)
        h("objref Clamps_0")
        h("a_pop0[0].Soma { Clamps_0 = new iclamp0(0.14669105) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt

        # ######################   Display: self.display_d1
        self.display_d1 = h.Graph(0)
        self.display_d1.size(0,h.tstop,-80.0,50.0)
        self.display_d1.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_d1)
        # Line, plotting: pop0/0/C51B/v
        self.display_d1.addexpr("a_pop0[0].Soma.v(0.14669105)", "a_pop0[0].Soma.v(0.14669105)", 1, 1, 0.8, 0.9, 2)



        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()

        self.display_d1.exec_menu("View = plot")

        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

if __name__ == '__main__':

    ns = NeuronSimulation(tstop=300, dt=0.01, seed=123456789)

    ns.run()

